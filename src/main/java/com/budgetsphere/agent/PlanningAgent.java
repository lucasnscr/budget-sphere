package com.budgetsphere.agent;

import com.budgetsphere.model.AgentResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

/**
 * üìã Planning Agent - Planning Pattern
 * Este agente implementa o padr√£o de Planejamento:
 * 1. ANALYZE: Analisa a situa√ß√£o financeira atual
 * 2. PLAN: Cria um plano detalhado e estruturado
 * 3. OPTIMIZE: Otimiza o plano baseado em regras financeiras
 * Usado para: Cria√ß√£o de or√ßamentos, planejamento de metas, estrat√©gias de economia
 */
@Slf4j
@Component
public class PlanningAgent extends BaseAgent {
    
    public PlanningAgent() {
        super("PlanningAgent", "Planning Pattern");
    }
    
    @Override
    public AgentResponse process(String input, Map<String, Object> context) {
        log.info("üìã PlanningAgent iniciando planejamento para: {}", input);
        
        try {
            // STEP 1: ANALYZE - Analisar situa√ß√£o atual
            String analysis = analyze(input, context);
            log.debug("üìä ANALYZE: {}", analysis);
            
            // STEP 2: PLAN - Criar plano estruturado
            String plan = createPlan(analysis, context);
            log.debug("üìù PLAN: {}", plan);
            
            // STEP 3: OPTIMIZE - Otimizar o plano
            String optimizedPlan = optimize(plan, context);
            log.debug("‚ö° OPTIMIZE: {}", optimizedPlan);
            
            Map<String, Object> data = new HashMap<>();
            data.put("analysis", analysis);
            data.put("initialPlan", plan);
            data.put("optimizedPlan", optimizedPlan);
            data.put("planningSteps", "analyze -> plan -> optimize");
            
            return createResponse(
                "Plano financeiro criado e otimizado: " + optimizedPlan,
                data,
                true
            );
            
        } catch (Exception e) {
            log.error("‚ùå Erro no PlanningAgent: {}", e.getMessage());
            return createResponse("Erro no planejamento: " + e.getMessage(), null, false);
        }
    }
    
    /**
     * ANALYZE: Analisa a situa√ß√£o financeira atual
     */
    private String analyze(String input, Map<String, Object> context) {
        String prompt = String.format("""
            Como planejador financeiro, ANALISE a seguinte situa√ß√£o:
            
            Solicita√ß√£o: %s
            Dados dispon√≠veis: %s
            
            Forne√ßa uma an√°lise estruturada:
            1. Situa√ß√£o atual
            2. Recursos dispon√≠veis
            3. Limita√ß√µes identificadas
            4. Oportunidades
            5. Riscos
            
            Seja objetivo e quantitativo quando poss√≠vel.
            """, input, context.toString());
            
        return callAI(prompt);
    }
    
    /**
     * PLAN: Cria um plano detalhado
     */
    private String createPlan(String analysis, Map<String, Object> context) {
        String prompt = String.format("""
            Baseado na an√°lise: "%s"
            
            Crie um PLANO DETALHADO com:
            
            1. OBJETIVO PRINCIPAL
            2. METAS ESPEC√çFICAS (com valores e prazos)
            3. ESTRAT√âGIAS (como alcan√ßar cada meta)
            4. RECURSOS NECESS√ÅRIOS
            5. CRONOGRAMA (passos mensais)
            6. INDICADORES DE SUCESSO
            
            Use a regra 50/30/20 como base quando aplic√°vel:
            - 50%% necessidades
            - 30%% desejos  
            - 20%% poupan√ßa/investimentos
            """, analysis);
            
        return callAI(prompt);
    }
    
    /**
     * OPTIMIZE: Otimiza o plano baseado em melhores pr√°ticas
     */
    private String optimize(String plan, Map<String, Object> context) {
        String prompt = String.format("""
            Plano inicial: "%s"
            
            OTIMIZE este plano considerando:
            
            1. EFICI√äNCIA: Como tornar mais eficiente?
            2. REALISMO: O plano √© realista e alcan√ß√°vel?
            3. FLEXIBILIDADE: Como adaptar a mudan√ßas?
            4. PRIORIZA√á√ÉO: Qual a ordem de prioridade?
            5. CONTING√äNCIA: E se algo der errado?
            
            Forne√ßa o plano otimizado com justificativas das mudan√ßas.
            """, plan);
            
        return callAI(prompt);
    }
}

