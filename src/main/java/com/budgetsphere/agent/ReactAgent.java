package com.budgetsphere.agent;

import com.budgetsphere.model.AgentResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

/**
 * üîÑ ReAct Agent - Reasoning and Acting Pattern
 * Este agente implementa o padr√£o ReAct (Reason + Act):
 * 1. OBSERVE: Analisa a situa√ß√£o financeira atual
 * 2. REASON: Raciocina sobre os dados e identifica padr√µes
 * 3. ACT: Toma a√ß√µes baseadas no racioc√≠nio
 * Usado para: An√°lise de despesas, detec√ß√£o de anomalias, alertas proativos
 */
@Slf4j
@Component
public class ReactAgent extends BaseAgent {
    
    public ReactAgent() {
        super("ReactAgent", "ReAct Pattern");
    }
    
    @Override
    public AgentResponse process(String input, Map<String, Object> context) {
        log.info("üîÑ ReactAgent iniciando ciclo ReAct para: {}", input);
        
        try {
            // STEP 1: OBSERVE - Observar a situa√ß√£o
            String observation = observe(input, context);
            log.debug("üëÅÔ∏è OBSERVE: {}", observation);
            
            // STEP 2: REASON - Raciocinar sobre os dados
            String reasoning = reason(observation, context);
            log.debug("üß† REASON: {}", reasoning);
            
            // STEP 3: ACT - Decidir a√ß√£o
            String action = act(reasoning, context);
            log.debug("‚ö° ACT: {}", action);
            
            Map<String, Object> data = new HashMap<>();
            data.put("observation", observation);
            data.put("reasoning", reasoning);
            data.put("action", action);
            data.put("cycle", "observe -> reason -> act");
            
            return createResponseWithReasoning(
                "An√°lise ReAct conclu√≠da: " + action,
                data,
                reasoning,
                action,
                true);
        } catch (Exception e) {
            log.error("‚ùå Erro no ReactAgent: {}", e.getMessage());
            return createResponse("Erro na an√°lise ReAct: " + e.getMessage(), null, false);
        }
    }
    
    /**
     * OBSERVE: Analisa os dados financeiros atuais
     */
    private String observe(String input, Map<String, Object> context) {
        String prompt = String.format("""
            Como analista financeiro, OBSERVE a seguinte situa√ß√£o:
            
            Entrada: %s
            Contexto: %s
            
            Descreva objetivamente o que voc√™ observa nos dados financeiros.
            Foque em fatos, n√∫meros e padr√µes vis√≠veis.
            """, input, context.toString());
            
        return callAI(prompt);
    }
    
    /**
     * REASON: Raciocina sobre as observa√ß√µes
     */
    private String reason(String observation, Map<String, Object> context) {
        String prompt = String.format("""
            Baseado na observa√ß√£o: "%s"
            
            RACIOCINE sobre os dados:
            1. Que padr√µes voc√™ identifica?
            2. H√° algo preocupante ou positivo?
            3. Quais s√£o as poss√≠veis causas?
            4. Que tend√™ncias voc√™ prev√™?
            
            Forne√ßa um racioc√≠nio l√≥gico e estruturado.
            """, observation);
            
        return callAI(prompt);
    }
    
    /**
     * ACT: Decide que a√ß√£o tomar baseado no racioc√≠nio
     */
    private String act(String reasoning, Map<String, Object> context) {
        String prompt = String.format("""
            Baseado no racioc√≠nio: "%s"
            
            Que A√á√ÉO espec√≠fica voc√™ recomenda?
            
            Escolha UMA a√ß√£o principal:
            - Criar alerta
            - Ajustar or√ßamento
            - Investigar categoria espec√≠fica
            - Parabenizar pelo progresso
            - Sugerir economia
            - Recomendar investimento
            
            Justifique sua escolha e seja espec√≠fico.
            """, reasoning);
            
        return callAI(prompt);
    }
}

